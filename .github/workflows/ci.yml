name: Deploy Hugo to GitHub Pages

on:
  pull_request:
  push:
    # filtering branches here prevents duplicate builds from pull_request and push
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# separate concurrency for branches/PRs so previews don't block each other
concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: true

env:
  CI: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        # using Hugo Modules, not submodules
        with:
          submodules: false

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: '0.151.0'
          extended: true

      - name: Build /public
        run: |
          hugo --minify --gc --enableGitInfo

      - name: Upload Artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./public

  linkcheck:
    name: Link Check
    needs: build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: '0.151.0'
          extended: true

      - name: Build /public
        run: |
          hugo --minify

      - name: Lychee Link Checker
        uses: lycheeverse/lychee-action@v2
        with:
          args: >
            --config .lychee.toml
            --format markdown
            --no-progress
            ./public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Lychee report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lychee-report
          path: lychee.md
          if-no-files-found: ignore

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          # PRs get a preview URL and pushes to `main` go straight to production
          preview: ${{ github.event_name == 'pull_request' }}

  purge-cloudflare:
    name: Purge Cloudflare Cache
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.deploy.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: none
    steps:
      - name: Purge Cache
        uses: jakejarvis/cloudflare-purge-action@v0.3.0
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}